[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "meshflow"
dynamic = ["version"]
description = 'MeshFlow aims to facilitate setting up MESH models for any temporal and spatial domain of interest. This package is prepared in Python and can be accessed from command line using its Command Line Interface.'
readme = "README.md"
requires-python = ">=3.9"
license = "GPL-3.0-or-later"
keywords = [
  "MESH",
  "ECCC",
  "Meshflow",
  "Hydrology",
  "Landsurface"
]
authors = [
  { name = "Kasra Keshavarz", email = "kasra.keshavarz1@ucalgary.ca" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "networkx>=3.1",
  "pint-xarray>=0.2.1",
  "xarray>=0.11",
  "geopandas>=0.13.2",
  "pandas>=1.4.0",
  "numpy>=1.22.2",
  "typing_extensions>=4.7.1",
  "hydrant>=0.1.0-dev0",
  "netCDF4>=1.6.4",
  "cdo>=1.5.6",
  "Jinja2>=3.1.4",
  "python-dateutil>=2.9.0",
  "pytz>=2025.2",
  "click>=8.2.1",
]

[project.urls]
Documentation = "https://github.com/unknown/meshflow#readme"
Issues = "https://github.com/unknown/meshflow/issues"
Source = "https://github.com/unknown/meshflow"

[project.scripts]
meshflow = "meshflow.cli.main:main"

[tool.hatch.version]
path = "src/meshflow/__init__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
  "networkx>=3.1",
  "pint-xarray>=0.2.1",
  "xarray>=0.11",
  "geopandas>=0.13.2",
  "pandas>=1.4.0",
  "numpy>=1.22.2",
  "typing_extensions>=4.7.1",
  "hydrant>=0.1.0-dev0",
  "click>=8.1.2",
  "netCDF4>=1.6.4"
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/meshflow tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["meshflow"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["meshflow", "tests"]
branch = true
parallel = true
omit = [
  "src/meshflow/__about__.py",
]

[tool.coverage.paths]
meshflow = ["src/meshflow", "*/meshflow/src/meshflow"]
tests = ["tests", "*/meshflow/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

# package data
[tool.setuptools.package-data]
your_package = ["templates/*.txt"]
